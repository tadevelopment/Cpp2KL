#ifndef __KL2EDK_AUTOGEN_AtTextureParams__
#define __KL2EDK_AUTOGEN_AtTextureParams__

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'AtTextureParams.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 2.1.0-alpha
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 2 || FABRIC_EDK_VERSION_MIN != 1
# error "This file needs to be rebuilt for the current EDK version!"
#endif

#include "global.h"

namespace Fabric { namespace EDK { namespace KL {

// KL struct 'AtTextureParams'
// Defined at ai_texture.kl:14:1

struct AtTextureParams
{
  typedef AtTextureParams &Result;
  typedef AtTextureParams const &INParam;
  typedef AtTextureParams &IOParam;
  typedef AtTextureParams &OUTParam;
  
  SInt32 filter;
  SInt32 mipmap_mode;
  SInt32 mipmap_bias;
  Boolean single_channel;
  UInt8 start_channel;
  Float32 fill;
  Boolean flip_s;
  Boolean flip_t;
  Boolean swap_st;
  Float32 scale_s;
  Float32 scale_t;
  SInt32 wrap_s;
  SInt32 wrap_t;
  Float32 width_s;
  Float32 width_t;
  Float32 blur_s;
  Float32 blur_t;
};

inline void Traits<AtTextureParams>::ConstructEmpty( AtTextureParams &val )
{
  Traits< SInt32 >::ConstructEmpty( val.filter );
  Traits< SInt32 >::ConstructEmpty( val.mipmap_mode );
  Traits< SInt32 >::ConstructEmpty( val.mipmap_bias );
  Traits< Boolean >::ConstructEmpty( val.single_channel );
  Traits< UInt8 >::ConstructEmpty( val.start_channel );
  Traits< Float32 >::ConstructEmpty( val.fill );
  Traits< Boolean >::ConstructEmpty( val.flip_s );
  Traits< Boolean >::ConstructEmpty( val.flip_t );
  Traits< Boolean >::ConstructEmpty( val.swap_st );
  Traits< Float32 >::ConstructEmpty( val.scale_s );
  Traits< Float32 >::ConstructEmpty( val.scale_t );
  Traits< SInt32 >::ConstructEmpty( val.wrap_s );
  Traits< SInt32 >::ConstructEmpty( val.wrap_t );
  Traits< Float32 >::ConstructEmpty( val.width_s );
  Traits< Float32 >::ConstructEmpty( val.width_t );
  Traits< Float32 >::ConstructEmpty( val.blur_s );
  Traits< Float32 >::ConstructEmpty( val.blur_t );
}
inline void Traits<AtTextureParams>::ConstructCopy( AtTextureParams &lhs, AtTextureParams const &rhs )
{
  Traits< SInt32 >::ConstructCopy( lhs.filter, rhs.filter );
  Traits< SInt32 >::ConstructCopy( lhs.mipmap_mode, rhs.mipmap_mode );
  Traits< SInt32 >::ConstructCopy( lhs.mipmap_bias, rhs.mipmap_bias );
  Traits< Boolean >::ConstructCopy( lhs.single_channel, rhs.single_channel );
  Traits< UInt8 >::ConstructCopy( lhs.start_channel, rhs.start_channel );
  Traits< Float32 >::ConstructCopy( lhs.fill, rhs.fill );
  Traits< Boolean >::ConstructCopy( lhs.flip_s, rhs.flip_s );
  Traits< Boolean >::ConstructCopy( lhs.flip_t, rhs.flip_t );
  Traits< Boolean >::ConstructCopy( lhs.swap_st, rhs.swap_st );
  Traits< Float32 >::ConstructCopy( lhs.scale_s, rhs.scale_s );
  Traits< Float32 >::ConstructCopy( lhs.scale_t, rhs.scale_t );
  Traits< SInt32 >::ConstructCopy( lhs.wrap_s, rhs.wrap_s );
  Traits< SInt32 >::ConstructCopy( lhs.wrap_t, rhs.wrap_t );
  Traits< Float32 >::ConstructCopy( lhs.width_s, rhs.width_s );
  Traits< Float32 >::ConstructCopy( lhs.width_t, rhs.width_t );
  Traits< Float32 >::ConstructCopy( lhs.blur_s, rhs.blur_s );
  Traits< Float32 >::ConstructCopy( lhs.blur_t, rhs.blur_t );
}
inline void Traits<AtTextureParams>::AssignCopy( AtTextureParams &lhs, AtTextureParams const &rhs )
{
  Traits< SInt32 >::AssignCopy( lhs.filter, rhs.filter );
  Traits< SInt32 >::AssignCopy( lhs.mipmap_mode, rhs.mipmap_mode );
  Traits< SInt32 >::AssignCopy( lhs.mipmap_bias, rhs.mipmap_bias );
  Traits< Boolean >::AssignCopy( lhs.single_channel, rhs.single_channel );
  Traits< UInt8 >::AssignCopy( lhs.start_channel, rhs.start_channel );
  Traits< Float32 >::AssignCopy( lhs.fill, rhs.fill );
  Traits< Boolean >::AssignCopy( lhs.flip_s, rhs.flip_s );
  Traits< Boolean >::AssignCopy( lhs.flip_t, rhs.flip_t );
  Traits< Boolean >::AssignCopy( lhs.swap_st, rhs.swap_st );
  Traits< Float32 >::AssignCopy( lhs.scale_s, rhs.scale_s );
  Traits< Float32 >::AssignCopy( lhs.scale_t, rhs.scale_t );
  Traits< SInt32 >::AssignCopy( lhs.wrap_s, rhs.wrap_s );
  Traits< SInt32 >::AssignCopy( lhs.wrap_t, rhs.wrap_t );
  Traits< Float32 >::AssignCopy( lhs.width_s, rhs.width_s );
  Traits< Float32 >::AssignCopy( lhs.width_t, rhs.width_t );
  Traits< Float32 >::AssignCopy( lhs.blur_s, rhs.blur_s );
  Traits< Float32 >::AssignCopy( lhs.blur_t, rhs.blur_t );
}
inline void Traits<AtTextureParams>::Destruct( AtTextureParams &val )
{
  Traits< Float32 >::Destruct( val.blur_t );
  Traits< Float32 >::Destruct( val.blur_s );
  Traits< Float32 >::Destruct( val.width_t );
  Traits< Float32 >::Destruct( val.width_s );
  Traits< SInt32 >::Destruct( val.wrap_t );
  Traits< SInt32 >::Destruct( val.wrap_s );
  Traits< Float32 >::Destruct( val.scale_t );
  Traits< Float32 >::Destruct( val.scale_s );
  Traits< Boolean >::Destruct( val.swap_st );
  Traits< Boolean >::Destruct( val.flip_t );
  Traits< Boolean >::Destruct( val.flip_s );
  Traits< Float32 >::Destruct( val.fill );
  Traits< UInt8 >::Destruct( val.start_channel );
  Traits< Boolean >::Destruct( val.single_channel );
  Traits< SInt32 >::Destruct( val.mipmap_bias );
  Traits< SInt32 >::Destruct( val.mipmap_mode );
  Traits< SInt32 >::Destruct( val.filter );
}
}}}

#endif // __KL2EDK_AUTOGEN_AtTextureParams__
