////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 2.1.0-alpha
////////////////////////////////////////////////////////////////

#include "global_functions.h"

#include "ai.h"
#include "_defines.h"

using namespace Fabric::EDK;


// Defined at GenKL\\ai_params.kl:77:1
FABRIC_EXT_EXPORT void _fe_AiParamGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetName")

const char * f2a_result = AiParamGetName(f2apentry);
  F2A_CATCH_STATEMENT("_fe_AiParamGetName")
}

// Defined at GenKL\\ai_params.kl:78:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiParamGetType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetType")

int f2a_result = AiParamGetType(f2apentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiParamGetType", )
}

// Defined at GenKL\\ai_params.kl:79:1
FABRIC_EXT_EXPORT void _fe_AiParamGetDefault(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamValue >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetDefault")

const AtParamValue * f2a_result = AiParamGetDefault(f2apentry);
  F2A_CATCH_STATEMENT("_fe_AiParamGetDefault")
}

// Defined at GenKL\\ai_params.kl:80:1
FABRIC_EXT_EXPORT void _fe_AiParamGetEnum(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetEnum")

AtEnum f2a_result = AiParamGetEnum(f2apentry);
  F2A_CATCH_STATEMENT("_fe_AiParamGetEnum")
}

// Defined at GenKL\\ai_params.kl:81:1
FABRIC_EXT_EXPORT void _fe_AiParamGetTypeName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetTypeName")

  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiParamGetTypeName. unable to convert: type");
    return;
  }
const char * f2a_result = AiParamGetTypeName(f2atype);
  F2A_CATCH_STATEMENT("_fe_AiParamGetTypeName")
}

// Defined at GenKL\\ai_params.kl:82:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiParamGetTypeSize(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetTypeSize")

  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiParamGetTypeSize. unable to convert: type");
    return ;
  }
AI_CONST int f2a_result = AiParamGetTypeSize(f2atype);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiParamGetTypeSize", )
}

// Defined at GenKL\\ai_params.kl:88:1
FABRIC_EXT_EXPORT void _fe_AiUserParamGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetName")

const char * f2a_result = AiUserParamGetName(f2aupentry);
  F2A_CATCH_STATEMENT("_fe_AiUserParamGetName")
}

// Defined at GenKL\\ai_params.kl:89:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetType")

int f2a_result = AiUserParamGetType(f2aupentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetType", )
}

// Defined at GenKL\\ai_params.kl:90:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetArrayType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetArrayType")

int f2a_result = AiUserParamGetArrayType(f2aupentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetArrayType", )
}

// Defined at GenKL\\ai_params.kl:91:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetCategory(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetCategory")

int f2a_result = AiUserParamGetCategory(f2aupentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetCategory", )
}

// Defined at GenKL\\ai_params.kl:92:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetIndex(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetIndex")

AI_CONST int f2a_result = AiUserParamGetIndex(f2aupentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetIndex", )
}

// Defined at GenKL\\ai_params.kl:93:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamByte(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamByte")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: pname");
    return;
  }
  AtByte f2aPdefault;
  if(!UInt8_to_AtByte(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: pdefault");
    return;
  }
AiNodeParamByte(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamByte")
}

// Defined at GenKL\\ai_params.kl:94:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamInt")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: pname");
    return;
  }
  int f2aPdefault;
  if(!SInt32_to_int(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: pdefault");
    return;
  }
AiNodeParamInt(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamInt")
}

// Defined at GenKL\\ai_params.kl:95:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamUInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamUInt")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: pname");
    return;
  }
  AtUInt32 f2aPdefault;
  if(!UInt32_to_AtUInt32(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: pdefault");
    return;
  }
AiNodeParamUInt(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamUInt")
}

// Defined at GenKL\\ai_params.kl:96:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamBool(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamBool")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: pname");
    return;
  }
  bool f2aPdefault;
  if(!Boolean_to_bool(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: pdefault");
    return;
  }
AiNodeParamBool(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamBool")
}

// Defined at GenKL\\ai_params.kl:97:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamFlt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamFlt")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: pname");
    return;
  }
  float f2aPdefault;
  if(!Float32_to_float(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: pdefault");
    return;
  }
AiNodeParamFlt(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamFlt")
}

// Defined at GenKL\\ai_params.kl:98:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamRGB(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamRGB")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: pname");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: b");
    return;
  }
AiNodeParamRGB(f2aparams, f2avaroffset, f2apname, f2ar, f2ag, f2ab);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamRGB")
}

// Defined at GenKL\\ai_params.kl:99:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamRGBA(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam a
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamRGBA")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: pname");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: b");
    return;
  }
  float f2aA;
  if(!Float32_to_float(a, f2aA)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: a");
    return;
  }
AiNodeParamRGBA(f2aparams, f2avaroffset, f2apname, f2ar, f2ag, f2ab, f2aa);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamRGBA")
}

// Defined at GenKL\\ai_params.kl:100:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamVec(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamVec")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: pname");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: z");
    return;
  }
AiNodeParamVec(f2aparams, f2avaroffset, f2apname, f2ax, f2ay, f2az);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamVec")
}

// Defined at GenKL\\ai_params.kl:101:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamPnt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamPnt")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: pname");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: z");
    return;
  }
AiNodeParamPnt(f2aparams, f2avaroffset, f2apname, f2ax, f2ay, f2az);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamPnt")
}

// Defined at GenKL\\ai_params.kl:102:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamPnt2(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamPnt2")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: pname");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: y");
    return;
  }
AiNodeParamPnt2(f2aparams, f2avaroffset, f2apname, f2ax, f2ay);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamPnt2")
}

// Defined at GenKL\\ai_params.kl:103:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamStr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamStr")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: pname");
    return;
  }
  char* f2aPdefault = NULL;
  if(!String_to_char(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: pdefault");
    return;
  }
AiNodeParamStr(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamStr")
}

// Defined at GenKL\\ai_params.kl:104:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamPtr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamPtr")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: pname");
    return;
  }
  AtList f2aPdefault;
  if(!Data_to_AtList(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: pdefault");
    return;
  }
AiNodeParamPtr(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);
  AtList_to_Data(f2aPdefault, pdefault);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamPtr")
}

// Defined at GenKL\\ai_params.kl:105:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamNode(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamNode")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamNode. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamNode. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamNode. unable to convert: pname");
    return;
  }
AiNodeParamNode(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamNode")
}

// Defined at GenKL\\ai_params.kl:106:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamArray(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamArray")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamArray. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamArray. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamArray. unable to convert: pname");
    return;
  }
AiNodeParamArray(f2aparams, f2avaroffset, f2apname, f2apdefault);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamArray")
}

// Defined at GenKL\\ai_params.kl:107:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamMtx(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam matrix
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamMtx")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: pname");
    return;
  }
  AtMatrix f2aMatrix;
  if(!Mat44_to_AtMatrix(matrix, f2aMatrix)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: matrix");
    return;
  }
AiNodeParamMtx(f2aparams, f2avaroffset, f2apname, f2amatrix);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamMtx")
}

// Defined at GenKL\\ai_params.kl:108:1
FABRIC_EXT_EXPORT void _fe_AiNodeParamEnum(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pdefault,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::INParam enum_type
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamEnum")

  AtList f2aParams;
  if(!Data_to_AtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: pname");
    return;
  }
  int f2aPdefault;
  if(!SInt32_to_int(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: pdefault");
    return;
  }
  AtEnum f2aEnum_type;
  if(!String[]_to_AtEnum(enum_type, f2aEnum_type)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: enum_type");
    return;
  }
AiNodeParamEnum(f2aparams, f2avaroffset, f2apname, f2apdefault, f2aenum_type);  AtList_to_Data(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamEnum")
}

// Defined at GenKL\\ai_cameras.kl:47:1
FABRIC_EXT_EXPORT void _fe_AiCameraInitialize(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam data
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraInitialize")

  AtList f2aData;
  if(!Data_to_AtList(data, f2aData)){
    setError("Error in _fe_AiCameraInitialize. unable to convert: data");
    return;
  }
AiCameraInitialize(f2anode, f2adata);  AtList_to_Data(f2aData, data);

  F2A_CATCH_STATEMENT("_fe_AiCameraInitialize")
}

// Defined at GenKL\\ai_cameras.kl:48:1
FABRIC_EXT_EXPORT void _fe_AiCameraUpdate(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam plane_distance
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraUpdate")

  bool f2aPlane_distance;
  if(!Boolean_to_bool(plane_distance, f2aPlane_distance)){
    setError("Error in _fe_AiCameraUpdate. unable to convert: plane_distance");
    return;
  }
AiCameraUpdate(f2anode, f2aplane_distance);
  F2A_CATCH_STATEMENT("_fe_AiCameraUpdate")
}

// Defined at GenKL\\ai_cameras.kl:49:1
FABRIC_EXT_EXPORT void _fe_AiCameraDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraDestroy")

AiCameraDestroy(f2anode);
  F2A_CATCH_STATEMENT("_fe_AiCameraDestroy")
}

// Defined at GenKL\\ai_cameras.kl:50:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiCameraGetLocalData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraGetLocalData")

void * f2a_result = AiCameraGetLocalData(f2anode);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiCameraGetLocalData", )
}

// Defined at GenKL\\ai_dotass.kl:8:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiASSWrite(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam mask,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam open_procs,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam binary
)
{
  F2A_TRY_STATEMENT("_fe_AiASSWrite")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiASSWrite. unable to convert: filename");
    return ;
  }
  int f2aMask;
  if(!SInt32_to_int(mask, f2aMask)){
    setError("Error in _fe_AiASSWrite. unable to convert: mask");
    return ;
  }
  bool f2aOpen_procs;
  if(!Boolean_to_bool(open_procs, f2aOpen_procs)){
    setError("Error in _fe_AiASSWrite. unable to convert: open_procs");
    return ;
  }
  bool f2aBinary;
  if(!Boolean_to_bool(binary, f2aBinary)){
    setError("Error in _fe_AiASSWrite. unable to convert: binary");
    return ;
  }
int f2a_result = AiASSWrite(f2afilename, f2amask/*=AI_NODE_ALL*/, f2aopen_procs/*=false*/, f2abinary/*=true*/);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiASSWrite", )
}

// Defined at GenKL\\ai_dotass.kl:9:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiASSLoad(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam mask
)
{
  F2A_TRY_STATEMENT("_fe_AiASSLoad")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiASSLoad. unable to convert: filename");
    return ;
  }
  int f2aMask;
  if(!SInt32_to_int(mask, f2aMask)){
    setError("Error in _fe_AiASSLoad. unable to convert: mask");
    return ;
  }
int f2a_result = AiASSLoad(f2afilename, f2amask/*=AI_NODE_ALL*/);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiASSLoad", )
}

// Defined at GenKL\\ai_enum.kl:8:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiEnumGetValue(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::INParam enum_type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam string
)
{
  F2A_TRY_STATEMENT("_fe_AiEnumGetValue")

  AtEnum f2aEnum_type;
  if(!String[]_to_AtEnum(enum_type, f2aEnum_type)){
    setError("Error in _fe_AiEnumGetValue. unable to convert: enum_type");
    return ;
  }
  char* f2aString = NULL;
  if(!String_to_char(string, f2aString)){
    setError("Error in _fe_AiEnumGetValue. unable to convert: string");
    return ;
  }
int f2a_result = AiEnumGetValue(f2aenum_type, f2astring);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiEnumGetValue", )
}

// Defined at GenKL\\ai_enum.kl:9:1
FABRIC_EXT_EXPORT void _fe_AiEnumGetString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::INParam enum_type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam index
)
{
  F2A_TRY_STATEMENT("_fe_AiEnumGetString")

  AtEnum f2aEnum_type;
  if(!String[]_to_AtEnum(enum_type, f2aEnum_type)){
    setError("Error in _fe_AiEnumGetString. unable to convert: enum_type");
    return;
  }
  int f2aIndex;
  if(!SInt32_to_int(index, f2aIndex)){
    setError("Error in _fe_AiEnumGetString. unable to convert: index");
    return;
  }
const char * f2a_result = AiEnumGetString(f2aenum_type, f2aindex);
  F2A_CATCH_STATEMENT("_fe_AiEnumGetString")
}

// Defined at GenKL\\ai_license.kl:77:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiLicenseSetServer(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam host,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam port
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseSetServer")

  char* f2aHost = NULL;
  if(!String_to_char(host, f2aHost)){
    setError("Error in _fe_AiLicenseSetServer. unable to convert: host");
    return ;
  }
  AtUInt32 f2aPort;
  if(!UInt32_to_AtUInt32(port, f2aPort)){
    setError("Error in _fe_AiLicenseSetServer. unable to convert: port");
    return ;
  }
bool f2a_result = AiLicenseSetServer(f2ahost, f2aport);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseSetServer", )
}

// Defined at GenKL\\ai_license.kl:78:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiLicenseGetServer(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::IOParam host,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam port
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetServer")

  char* f2aHost = NULL;
  if(!String_to_char(host, f2aHost)){
    setError("Error in _fe_AiLicenseGetServer. unable to convert: host");
    return ;
  }
  AtUInt32 f2aPort;
  if(!UInt32_to_AtUInt32(port, f2aPort)){
    setError("Error in _fe_AiLicenseGetServer. unable to convert: port");
    return ;
  }
bool f2a_result = AiLicenseGetServer(f2ahost, f2aport);  char_to_String(f2aHost, host);
  AtUInt32_to_UInt32(f2aPort, port);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetServer", )
}

// Defined at GenKL\\ai_license.kl:79:1
FABRIC_EXT_EXPORT void _fe_AiLicenseSetAttempts(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam attempts
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseSetAttempts")

  int f2aAttempts;
  if(!SInt32_to_int(attempts, f2aAttempts)){
    setError("Error in _fe_AiLicenseSetAttempts. unable to convert: attempts");
    return;
  }
AiLicenseSetAttempts(f2aattempts);
  F2A_CATCH_STATEMENT("_fe_AiLicenseSetAttempts")
}

// Defined at GenKL\\ai_license.kl:80:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiLicenseGetAttempts(
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetAttempts")

unsigned int f2a_result = AiLicenseGetAttempts();
  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetAttempts", )
}

// Defined at GenKL\\ai_license.kl:81:1
FABRIC_EXT_EXPORT void _fe_AiLicenseSetAttemptDelay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam msecs
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseSetAttemptDelay")

  int f2aMsecs;
  if(!SInt32_to_int(msecs, f2aMsecs)){
    setError("Error in _fe_AiLicenseSetAttemptDelay. unable to convert: msecs");
    return;
  }
AiLicenseSetAttemptDelay(f2amsecs);
  F2A_CATCH_STATEMENT("_fe_AiLicenseSetAttemptDelay")
}

// Defined at GenKL\\ai_license.kl:82:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiLicenseGetAttemptDelay(
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetAttemptDelay")

unsigned int f2a_result = AiLicenseGetAttemptDelay();
  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetAttemptDelay", )
}

// Defined at GenKL\\ai_license.kl:83:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiLicenseGetInfo(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtLicenseInfo >::IOParam licenses,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam n
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetInfo")

  AtUInt32 f2aN;
  if(!UInt32_to_AtUInt32(n, f2aN)){
    setError("Error in _fe_AiLicenseGetInfo. unable to convert: n");
    return ;
  }
int f2a_result = AiLicenseGetInfo(f2alicenses, f2an);  AtUInt32_to_UInt32(f2aN, n);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetInfo", )
}

// Defined at GenKL\\ai_metadata.kl:26:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetBool(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetBool")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetBool. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetBool. unable to convert: name");
    return;
  }
  bool f2aValue;
  if(!Boolean_to_bool(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetBool. unable to convert: value");
    return;
  }
AiMetaDataSetBool(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetBool")
}

// Defined at GenKL\\ai_metadata.kl:27:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetBoolAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetBoolAtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetBoolAtString. unable to convert: name");
    return;
  }
  bool f2aValue;
  if(!Boolean_to_bool(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetBoolAtString. unable to convert: value");
    return;
  }
AiMetaDataSetBoolAtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetBoolAtString")
}

// Defined at GenKL\\ai_metadata.kl:28:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetInt")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetInt. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetInt. unable to convert: name");
    return;
  }
  int f2aValue;
  if(!SInt32_to_int(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetInt. unable to convert: value");
    return;
  }
AiMetaDataSetInt(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetInt")
}

// Defined at GenKL\\ai_metadata.kl:29:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetIntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetIntAtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetIntAtString. unable to convert: name");
    return;
  }
  int f2aValue;
  if(!SInt32_to_int(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetIntAtString. unable to convert: value");
    return;
  }
AiMetaDataSetIntAtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetIntAtString")
}

// Defined at GenKL\\ai_metadata.kl:30:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetFlt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetFlt")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetFlt. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetFlt. unable to convert: name");
    return;
  }
  float f2aValue;
  if(!Float32_to_float(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetFlt. unable to convert: value");
    return;
  }
AiMetaDataSetFlt(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetFlt")
}

// Defined at GenKL\\ai_metadata.kl:31:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetFltAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetFltAtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetFltAtString. unable to convert: name");
    return;
  }
  float f2aValue;
  if(!Float32_to_float(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetFltAtString. unable to convert: value");
    return;
  }
AiMetaDataSetFltAtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetFltAtString")
}

// Defined at GenKL\\ai_metadata.kl:32:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetRGB(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetRGB")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetRGB. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetRGB. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetRGB. unable to convert: value");
    return;
  }
AiMetaDataSetRGB(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetRGB")
}

// Defined at GenKL\\ai_metadata.kl:33:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetRGBAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetRGBAtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetRGBAtString. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetRGBAtString. unable to convert: value");
    return;
  }
AiMetaDataSetRGBAtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetRGBAtString")
}

// Defined at GenKL\\ai_metadata.kl:34:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetVec(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetVec")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetVec. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetVec. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetVec. unable to convert: value");
    return;
  }
AiMetaDataSetVec(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetVec")
}

// Defined at GenKL\\ai_metadata.kl:35:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetVecAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetVecAtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetVecAtString. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetVecAtString. unable to convert: value");
    return;
  }
AiMetaDataSetVecAtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetVecAtString")
}

// Defined at GenKL\\ai_metadata.kl:36:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPnt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPnt")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPnt. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPnt. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPnt. unable to convert: value");
    return;
  }
AiMetaDataSetPnt(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPnt")
}

// Defined at GenKL\\ai_metadata.kl:37:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPntAtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPntAtString. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPntAtString. unable to convert: value");
    return;
  }
AiMetaDataSetPntAtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPntAtString")
}

// Defined at GenKL\\ai_metadata.kl:38:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPnt2(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPnt2")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPnt2. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPnt2. unable to convert: name");
    return;
  }
  AtPoint2 f2aValue;
  if(!Vec2_to_AtPoint2(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPnt2. unable to convert: value");
    return;
  }
AiMetaDataSetPnt2(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPnt2")
}

// Defined at GenKL\\ai_metadata.kl:39:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPnt2AtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPnt2AtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPnt2AtString. unable to convert: name");
    return;
  }
  AtPoint2 f2aValue;
  if(!Vec2_to_AtPoint2(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPnt2AtString. unable to convert: value");
    return;
  }
AiMetaDataSetPnt2AtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPnt2AtString")
}

// Defined at GenKL\\ai_metadata.kl:40:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetStr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetStr")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetStr. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetStr. unable to convert: name");
    return;
  }
  char* f2aValue = NULL;
  if(!String_to_char(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetStr. unable to convert: value");
    return;
  }
AiMetaDataSetStr(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetStr")
}

// Defined at GenKL\\ai_metadata.kl:41:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataSetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetStrAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetStrAtString. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetStrAtString. unable to convert: name");
    return;
  }
  char* f2aValue = NULL;
  if(!String_to_char(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetStrAtString. unable to convert: value");
    return;
  }
AiMetaDataSetStrAtString(f2amds, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetStrAtString")
}

// Defined at GenKL\\ai_metadata.kl:55:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetBoolAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetBoolAtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetBoolAtString. unable to convert: name");
    return ;
  }
  bool f2aValue;
  if(!Boolean_to_bool(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetBoolAtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetBoolAtString(f2aentry, f2aparam, f2aname, f2avalue);  bool_to_Boolean(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetBoolAtString", )
}

// Defined at GenKL\\ai_metadata.kl:56:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetIntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetIntAtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetIntAtString. unable to convert: name");
    return ;
  }
  int f2aValue;
  if(!SInt32_to_int(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetIntAtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetIntAtString(f2aentry, f2aparam, f2aname, f2avalue);  int_to_SInt32(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetIntAtString", )
}

// Defined at GenKL\\ai_metadata.kl:57:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetFltAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetFltAtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetFltAtString. unable to convert: name");
    return ;
  }
  float f2aValue;
  if(!Float32_to_float(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetFltAtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetFltAtString(f2aentry, f2aparam, f2aname, f2avalue);  float_to_Float32(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetFltAtString", )
}

// Defined at GenKL\\ai_metadata.kl:58:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetRGBAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetRGBAtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetRGBAtString. unable to convert: name");
    return ;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetRGBAtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetRGBAtString(f2aentry, f2aparam, f2aname, f2avalue);  AtPoint_to_Vec3(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetRGBAtString", )
}

// Defined at GenKL\\ai_metadata.kl:59:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetVecAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetVecAtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetVecAtString. unable to convert: name");
    return ;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetVecAtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetVecAtString(f2aentry, f2aparam, f2aname, f2avalue);  AtPoint_to_Vec3(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetVecAtString", )
}

// Defined at GenKL\\ai_metadata.kl:60:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetPntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetPntAtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetPntAtString. unable to convert: name");
    return ;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetPntAtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetPntAtString(f2aentry, f2aparam, f2aname, f2avalue);  AtPoint_to_Vec3(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetPntAtString", )
}

// Defined at GenKL\\ai_metadata.kl:61:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetPnt2AtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetPnt2AtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetPnt2AtString. unable to convert: name");
    return ;
  }
  AtPoint2 f2aValue;
  if(!Vec2_to_AtPoint2(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetPnt2AtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetPnt2AtString(f2aentry, f2aparam, f2aname, f2avalue);  AtPoint2_to_Vec2(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetPnt2AtString", )
}

// Defined at GenKL\\ai_metadata.kl:62:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetStrAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetStrAtString. unable to convert: param");
    return ;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetStrAtString. unable to convert: name");
    return ;
  }
  char* f2aValue = NULL;
  if(!String_to_char(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetStrAtString. unable to convert: value");
    return ;
  }
bool f2a_result = AiMetaDataGetStrAtString(f2aentry, f2aparam, f2aname, f2avalue);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetStrAtString", )
}

// Defined at GenKL\\ai_metadata.kl:73:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataLoadFile(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataLoadFile")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiMetaDataLoadFile. unable to convert: filename");
    return ;
  }
bool f2a_result = AiMetaDataLoadFile(f2afilename);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataLoadFile", )
}

// Defined at GenKL\\ai_msg.kl:37:1
FABRIC_EXT_EXPORT void _fe_AiMsgSetLogFileName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetLogFileName")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiMsgSetLogFileName. unable to convert: filename");
    return;
  }
AiMsgSetLogFileName(f2afilename);
  F2A_CATCH_STATEMENT("_fe_AiMsgSetLogFileName")
}

// Defined at GenKL\\ai_msg.kl:38:1
FABRIC_EXT_EXPORT void _fe_AiMsgSetLogFileFlags(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam flags
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetLogFileFlags")

  int f2aFlags;
  if(!SInt32_to_int(flags, f2aFlags)){
    setError("Error in _fe_AiMsgSetLogFileFlags. unable to convert: flags");
    return;
  }
AiMsgSetLogFileFlags(f2aflags);
  F2A_CATCH_STATEMENT("_fe_AiMsgSetLogFileFlags")
}

// Defined at GenKL\\ai_msg.kl:39:1
FABRIC_EXT_EXPORT void _fe_AiMsgSetConsoleFlags(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam flags
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetConsoleFlags")

  int f2aFlags;
  if(!SInt32_to_int(flags, f2aFlags)){
    setError("Error in _fe_AiMsgSetConsoleFlags. unable to convert: flags");
    return;
  }
AiMsgSetConsoleFlags(f2aflags);
  F2A_CATCH_STATEMENT("_fe_AiMsgSetConsoleFlags")
}

// Defined at GenKL\\ai_msg.kl:40:1
FABRIC_EXT_EXPORT void _fe_AiMsgSetMaxWarnings(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam max_warnings
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetMaxWarnings")

  int f2aMax_warnings;
  if(!SInt32_to_int(max_warnings, f2aMax_warnings)){
    setError("Error in _fe_AiMsgSetMaxWarnings. unable to convert: max_warnings");
    return;
  }
AiMsgSetMaxWarnings(f2amax_warnings);
  F2A_CATCH_STATEMENT("_fe_AiMsgSetMaxWarnings")
}

// Defined at GenKL\\ai_msg.kl:41:1
FABRIC_EXT_EXPORT void _fe_AiMsgResetCallback(
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgResetCallback")

AiMsgResetCallback();
  F2A_CATCH_STATEMENT("_fe_AiMsgResetCallback")
}

// Defined at GenKL\\ai_msg.kl:42:1
FABRIC_EXT_EXPORT void _fe_AiMsgInfo(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgInfo")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgInfo. unable to convert: format");
    return;
  }
AiMsgInfo(f2aformat);
  F2A_CATCH_STATEMENT("_fe_AiMsgInfo")
}

// Defined at GenKL\\ai_msg.kl:43:1
FABRIC_EXT_EXPORT void _fe_AiMsgDebug(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgDebug")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgDebug. unable to convert: format");
    return;
  }
AiMsgDebug(f2aformat);
  F2A_CATCH_STATEMENT("_fe_AiMsgDebug")
}

// Defined at GenKL\\ai_msg.kl:44:1
FABRIC_EXT_EXPORT void _fe_AiMsgWarning(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgWarning")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgWarning. unable to convert: format");
    return;
  }
AiMsgWarning(f2aformat);
  F2A_CATCH_STATEMENT("_fe_AiMsgWarning")
}

// Defined at GenKL\\ai_msg.kl:45:1
FABRIC_EXT_EXPORT void _fe_AiMsgError(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgError")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgError. unable to convert: format");
    return;
  }
AiMsgError(f2aformat);
  F2A_CATCH_STATEMENT("_fe_AiMsgError")
}

// Defined at GenKL\\ai_msg.kl:46:1
FABRIC_EXT_EXPORT void _fe_AiMsgFatal(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgFatal")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgFatal. unable to convert: format");
    return;
  }
AiMsgFatal(f2aformat);
  F2A_CATCH_STATEMENT("_fe_AiMsgFatal")
}

// Defined at GenKL\\ai_msg.kl:47:1
FABRIC_EXT_EXPORT void _fe_AiMsgTab(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam tabinc
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgTab")

  int f2aTabinc;
  if(!SInt32_to_int(tabinc, f2aTabinc)){
    setError("Error in _fe_AiMsgTab. unable to convert: tabinc");
    return;
  }
AiMsgTab(f2atabinc);
  F2A_CATCH_STATEMENT("_fe_AiMsgTab")
}

// Defined at GenKL\\ai_msg.kl:48:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt64 _fe_AiMsgUtilGetUsedMemory(
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgUtilGetUsedMemory")

AtUInt64 f2a_result = AiMsgUtilGetUsedMemory();
  F2A_CATCH_STATEMENT_RETURN("_fe_AiMsgUtilGetUsedMemory", )
}

// Defined at GenKL\\ai_msg.kl:49:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiMsgUtilGetElapsedTime(
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgUtilGetElapsedTime")

AtUInt32 f2a_result = AiMsgUtilGetElapsedTime();
  F2A_CATCH_STATEMENT_RETURN("_fe_AiMsgUtilGetElapsedTime", )
}

// Defined at GenKL\\ai_node_entry.kl:52:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryLookUpAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryLookUpAtString")

  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiNodeEntryLookUpAtString. unable to convert: name");
    return;
  }
const AtNodeEntry * f2a_result = AiNodeEntryLookUpAtString(f2aname);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryLookUpAtString")
}

// Defined at GenKL\\ai_node_entry.kl:53:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetName")

const char * f2a_result = AiNodeEntryGetName(f2anentry);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetName")
}

// Defined at GenKL\\ai_node_entry.kl:54:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetType")

int f2a_result = AiNodeEntryGetType(f2anentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetType", )
}

// Defined at GenKL\\ai_node_entry.kl:55:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetTypeName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetTypeName")

const char * f2a_result = AiNodeEntryGetTypeName(f2anentry);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetTypeName")
}

// Defined at GenKL\\ai_node_entry.kl:56:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetOutputType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetOutputType")

int f2a_result = AiNodeEntryGetOutputType(f2anentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetOutputType", )
}

// Defined at GenKL\\ai_node_entry.kl:57:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetFilename(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetFilename")

const char * f2a_result = AiNodeEntryGetFilename(f2anentry);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetFilename")
}

// Defined at GenKL\\ai_node_entry.kl:58:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetVersion(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetVersion")

const char * f2a_result = AiNodeEntryGetVersion(f2anentry);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetVersion")
}

// Defined at GenKL\\ai_node_entry.kl:59:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetCount(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetCount")

int f2a_result = AiNodeEntryGetCount(f2anentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetCount", )
}

// Defined at GenKL\\ai_node_entry.kl:60:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetNumParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetNumParams")

int f2a_result = AiNodeEntryGetNumParams(f2anentry);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetNumParams", )
}

// Defined at GenKL\\ai_node_entry.kl:61:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetParameter(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam i
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetParameter")

  int f2aI;
  if(!SInt32_to_int(i, f2aI)){
    setError("Error in _fe_AiNodeEntryGetParameter. unable to convert: i");
    return;
  }
const AtParamEntry * f2a_result = AiNodeEntryGetParameter(f2anentry, f2ai);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetParameter")
}

// Defined at GenKL\\ai_node_entry.kl:62:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryLookUpParameterAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryLookUpParameterAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeEntryLookUpParameterAtString. unable to convert: param");
    return;
  }
const AtParamEntry * f2a_result = AiNodeEntryLookUpParameterAtString(f2anentry, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryLookUpParameterAtString")
}

// Defined at GenKL\\ai_node_entry.kl:63:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetParamIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetParamIterator")

AtParamIterator * f2a_result = AiNodeEntryGetParamIterator(f2anentry);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetParamIterator")
}

// Defined at GenKL\\ai_node_entry.kl:64:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetMetaDataIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetMetaDataIterator")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeEntryGetMetaDataIterator. unable to convert: param");
    return;
  }
AtMetaDataIterator * f2a_result = AiNodeEntryGetMetaDataIterator(f2anentry, f2aparam/*=NULL*/);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetMetaDataIterator")
}

// Defined at GenKL\\ai_node_entry.kl:65:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryInstall(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam output_type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeMethods >::IOParam methods,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam version
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryInstall")

  int f2aType;
  if(!SInt32_to_int(type, f2aType)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: type");
    return;
  }
  AtByte f2aOutput_type;
  if(!UInt8_to_AtByte(output_type, f2aOutput_type)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: output_type");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: name");
    return;
  }
  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: filename");
    return;
  }
  char* f2aVersion = NULL;
  if(!String_to_char(version, f2aVersion)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: version");
    return;
  }
AiNodeEntryInstall(f2atype, f2aoutput_type, f2aname, f2afilename, f2amethods, f2aversion);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryInstall")
}

// Defined at GenKL\\ai_node_entry.kl:66:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryUninstall(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryUninstall")

  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiNodeEntryUninstall. unable to convert: name");
    return;
  }
AiNodeEntryUninstall(f2aname);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryUninstall")
}

// Defined at GenKL\\ai_node_entry.kl:72:1
FABRIC_EXT_EXPORT void _fe_AiParamIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiParamIteratorDestroy")

AiParamIteratorDestroy(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiParamIteratorDestroy")
}

// Defined at GenKL\\ai_node_entry.kl:73:1
FABRIC_EXT_EXPORT void _fe_AiParamIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiParamIteratorGetNext")

const AtParamEntry * f2a_result = AiParamIteratorGetNext(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiParamIteratorGetNext")
}

// Defined at GenKL\\ai_node_entry.kl:74:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiParamIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiParamIteratorFinished")

bool f2a_result = AiParamIteratorFinished(f2aiter);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiParamIteratorFinished", )
}

// Defined at GenKL\\ai_node_entry.kl:80:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataIteratorDestroy")

AiMetaDataIteratorDestroy(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataIteratorDestroy")
}

// Defined at GenKL\\ai_node_entry.kl:81:1
FABRIC_EXT_EXPORT void _fe_AiMetaDataIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataIteratorGetNext")

const AtMetaDataEntry * f2a_result = AiMetaDataIteratorGetNext(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiMetaDataIteratorGetNext")
}

// Defined at GenKL\\ai_node_entry.kl:82:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataIteratorFinished")

bool f2a_result = AiMetaDataIteratorFinished(f2aiter);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataIteratorFinished", )
}

// Defined at GenKL\\ai_nodes.kl:22:1
FABRIC_EXT_EXPORT void _fe_AiNodeAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeAtString")

  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiNodeAtString. unable to convert: name");
    return;
  }
AtNode * f2a_result = AiNodeAtString(f2aname);
  F2A_CATCH_STATEMENT("_fe_AiNodeAtString")
}

// Defined at GenKL\\ai_nodes.kl:23:1
FABRIC_EXT_EXPORT void _fe_AiNodeLookUpByNameAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLookUpByNameAtString")

  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiNodeLookUpByNameAtString. unable to convert: name");
    return;
  }
AtNode * f2a_result = AiNodeLookUpByNameAtString(f2aname);
  F2A_CATCH_STATEMENT("_fe_AiNodeLookUpByNameAtString")
}

// Defined at GenKL\\ai_nodes.kl:24:1
FABRIC_EXT_EXPORT void _fe_AiNodeReset(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeReset")

AiNodeReset(f2anode);
  F2A_CATCH_STATEMENT("_fe_AiNodeReset")
}

// Defined at GenKL\\ai_nodes.kl:25:1
FABRIC_EXT_EXPORT void _fe_AiNodeResetParameter(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeResetParameter")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeResetParameter. unable to convert: param");
    return;
  }
AiNodeResetParameter(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeResetParameter")
}

// Defined at GenKL\\ai_nodes.kl:26:1
FABRIC_EXT_EXPORT void _fe_AiNodeClone(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeClone")

AtNode * f2a_result = AiNodeClone(f2anode);
  F2A_CATCH_STATEMENT("_fe_AiNodeClone")
}

// Defined at GenKL\\ai_nodes.kl:27:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeDestroy")

bool f2a_result = AiNodeDestroy(f2anode);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeDestroy", )
}

// Defined at GenKL\\ai_nodes.kl:28:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam str
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIs")

  char* f2aStr = NULL;
  if(!String_to_char(str, f2aStr)){
    setError("Error in _fe_AiNodeIs. unable to convert: str");
    return ;
  }
bool f2a_result = AiNodeIs(f2anode, f2astr);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIs", )
}

// Defined at GenKL\\ai_nodes.kl:29:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeDeclareAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam declaration
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeDeclareAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeDeclareAtString. unable to convert: param");
    return ;
  }
  char* f2aDeclaration = NULL;
  if(!String_to_char(declaration, f2aDeclaration)){
    setError("Error in _fe_AiNodeDeclareAtString. unable to convert: declaration");
    return ;
  }
bool f2a_result = AiNodeDeclareAtString(f2anode, f2aparam, f2adeclaration);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeDeclareAtString", )
}

// Defined at GenKL\\ai_nodes.kl:30:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeLink(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam src,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam target
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLink")

  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeLink. unable to convert: input");
    return ;
  }
bool f2a_result = AiNodeLink(f2asrc, f2ainput, f2atarget);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeLink", )
}

// Defined at GenKL\\ai_nodes.kl:31:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeLinkOutput(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam src,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam output,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam target,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLinkOutput")

  char* f2aOutput = NULL;
  if(!String_to_char(output, f2aOutput)){
    setError("Error in _fe_AiNodeLinkOutput. unable to convert: output");
    return ;
  }
  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeLinkOutput. unable to convert: input");
    return ;
  }
bool f2a_result = AiNodeLinkOutput(f2asrc, f2aoutput, f2atarget, f2ainput);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeLinkOutput", )
}

// Defined at GenKL\\ai_nodes.kl:32:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeUnlink(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeUnlink")

  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeUnlink. unable to convert: input");
    return ;
  }
bool f2a_result = AiNodeUnlink(f2anode, f2ainput);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeUnlink", )
}

// Defined at GenKL\\ai_nodes.kl:33:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIsLinked(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIsLinked")

  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeIsLinked. unable to convert: input");
    return ;
  }
bool f2a_result = AiNodeIsLinked(f2anode, f2ainput);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIsLinked", )
}

// Defined at GenKL\\ai_nodes.kl:34:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetLink(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::IOParam comp
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetLink")

  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeGetLink. unable to convert: input");
    return;
  }
  int f2aComp;
  if(!SInt32_to_int(comp, f2aComp)){
    setError("Error in _fe_AiNodeGetLink. unable to convert: comp");
    return;
  }
AtNode * f2a_result = AiNodeGetLink(f2anode, f2ainput, f2acomp/*=NULL*/);  int_to_SInt32(f2aComp, comp);

  F2A_CATCH_STATEMENT("_fe_AiNodeGetLink")
}

// Defined at GenKL\\ai_nodes.kl:35:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetName")

const char * f2a_result = AiNodeGetName(f2anode);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetName")
}

// Defined at GenKL\\ai_nodes.kl:36:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetNodeEntry(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetNodeEntry")

const AtNodeEntry * f2a_result = AiNodeGetNodeEntry(f2anode);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetNodeEntry")
}

// Defined at GenKL\\ai_nodes.kl:37:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamValue >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetParams")

AtParamValue * f2a_result = AiNodeGetParams(f2anode);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetParams")
}

// Defined at GenKL\\ai_nodes.kl:38:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiNodeGetLocalData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetLocalData")

void * f2a_result = AiNodeGetLocalData(f2anode);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetLocalData", )
}

// Defined at GenKL\\ai_nodes.kl:39:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetLocalData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam data
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetLocalData")

  AtList f2aData;
  if(!Data_to_AtList(data, f2aData)){
    setError("Error in _fe_AiNodeSetLocalData. unable to convert: data");
    return;
  }
AiNodeSetLocalData(f2anode, f2adata);  AtList_to_Data(f2aData, data);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetLocalData")
}

// Defined at GenKL\\ai_nodes.kl:40:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetDisabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam disabled
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetDisabled")

  bool f2aDisabled;
  if(!Boolean_to_bool(disabled, f2aDisabled)){
    setError("Error in _fe_AiNodeSetDisabled. unable to convert: disabled");
    return;
  }
AiNodeSetDisabled(f2anode, f2adisabled);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetDisabled")
}

// Defined at GenKL\\ai_nodes.kl:41:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIsDisabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIsDisabled")

bool f2a_result = AiNodeIsDisabled(f2anode);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIsDisabled", )
}

// Defined at GenKL\\ai_nodes.kl:42:1
FABRIC_EXT_EXPORT void _fe_AiNodeLookUpUserParameterAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLookUpUserParameterAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeLookUpUserParameterAtString. unable to convert: param");
    return;
  }
const AtUserParamEntry * f2a_result = AiNodeLookUpUserParameterAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeLookUpUserParameterAtString")
}

// Defined at GenKL\\ai_nodes.kl:43:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetUserParamIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetUserParamIterator")

AtUserParamIterator * f2a_result = AiNodeGetUserParamIterator(f2anode);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetUserParamIterator")
}

// Defined at GenKL\\ai_nodes.kl:49:1
FABRIC_EXT_EXPORT void _fe_AiUserParamIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamIteratorDestroy")

AiUserParamIteratorDestroy(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiUserParamIteratorDestroy")
}

// Defined at GenKL\\ai_nodes.kl:50:1
FABRIC_EXT_EXPORT void _fe_AiUserParamIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamIteratorGetNext")

const AtUserParamEntry * f2a_result = AiUserParamIteratorGetNext(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiUserParamIteratorGetNext")
}

// Defined at GenKL\\ai_nodes.kl:51:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiUserParamIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamIteratorFinished")

bool f2a_result = AiUserParamIteratorFinished(f2aiter);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamIteratorFinished", )
}

// Defined at GenKL\\ai_nodes.kl:57:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetByteAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetByteAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetByteAtString. unable to convert: param");
    return;
  }
  AtByte f2aVal;
  if(!UInt8_to_AtByte(val, f2aVal)){
    setError("Error in _fe_AiNodeSetByteAtString. unable to convert: val");
    return;
  }
AiNodeSetByteAtString(f2anode, f2aparam, f2aval);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetByteAtString")
}

// Defined at GenKL\\ai_nodes.kl:58:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetIntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetIntAtString. unable to convert: param");
    return;
  }
  int f2aVal;
  if(!SInt32_to_int(val, f2aVal)){
    setError("Error in _fe_AiNodeSetIntAtString. unable to convert: val");
    return;
  }
AiNodeSetIntAtString(f2anode, f2aparam, f2aval);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetIntAtString")
}

// Defined at GenKL\\ai_nodes.kl:59:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetUIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetUIntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetUIntAtString. unable to convert: param");
    return;
  }
  AtUInt32 f2aVal;
  if(!UInt32_to_AtUInt32(val, f2aVal)){
    setError("Error in _fe_AiNodeSetUIntAtString. unable to convert: val");
    return;
  }
AiNodeSetUIntAtString(f2anode, f2aparam, f2aval);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetUIntAtString")
}

// Defined at GenKL\\ai_nodes.kl:60:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetBoolAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetBoolAtString. unable to convert: param");
    return;
  }
  bool f2aVal;
  if(!Boolean_to_bool(val, f2aVal)){
    setError("Error in _fe_AiNodeSetBoolAtString. unable to convert: val");
    return;
  }
AiNodeSetBoolAtString(f2anode, f2aparam, f2aval);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetBoolAtString")
}

// Defined at GenKL\\ai_nodes.kl:61:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetFltAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetFltAtString. unable to convert: param");
    return;
  }
  float f2aVal;
  if(!Float32_to_float(val, f2aVal)){
    setError("Error in _fe_AiNodeSetFltAtString. unable to convert: val");
    return;
  }
AiNodeSetFltAtString(f2anode, f2aparam, f2aval);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetFltAtString")
}

// Defined at GenKL\\ai_nodes.kl:62:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetPtrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetPtrAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetPtrAtString. unable to convert: param");
    return;
  }
  AtList f2aVal;
  if(!Data_to_AtList(val, f2aVal)){
    setError("Error in _fe_AiNodeSetPtrAtString. unable to convert: val");
    return;
  }
AiNodeSetPtrAtString(f2anode, f2aparam, f2aval);  AtList_to_Data(f2aVal, val);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetPtrAtString")
}

// Defined at GenKL\\ai_nodes.kl:63:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetArrayAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetArrayAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetArrayAtString. unable to convert: param");
    return;
  }
AiNodeSetArrayAtString(f2anode, f2aparam, f2aval);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetArrayAtString")
}

// Defined at GenKL\\ai_nodes.kl:64:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetMatrixAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetMatrixAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetMatrixAtString. unable to convert: param");
    return;
  }
  AtMatrix f2aVal;
  if(!Mat44_to_AtMatrix(val, f2aVal)){
    setError("Error in _fe_AiNodeSetMatrixAtString. unable to convert: val");
    return;
  }
AiNodeSetMatrixAtString(f2anode, f2aparam, f2aval);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetMatrixAtString")
}

// Defined at GenKL\\ai_nodes.kl:65:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam str
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetStrAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetStrAtString. unable to convert: param");
    return;
  }
  char* f2aStr = NULL;
  if(!String_to_char(str, f2aStr)){
    setError("Error in _fe_AiNodeSetStrAtString. unable to convert: str");
    return;
  }
AiNodeSetStrAtString(f2anode, f2aparam, f2astr);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetStrAtString")
}

// Defined at GenKL\\ai_nodes.kl:66:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetRGBAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: param");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: b");
    return;
  }
AiNodeSetRGBAtString(f2anode, f2aparam, f2ar, f2ag, f2ab);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetRGBAtString")
}

// Defined at GenKL\\ai_nodes.kl:67:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetRGBAAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam a
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetRGBAAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: param");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: b");
    return;
  }
  float f2aA;
  if(!Float32_to_float(a, f2aA)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: a");
    return;
  }
AiNodeSetRGBAAtString(f2anode, f2aparam, f2ar, f2ag, f2ab, f2aa);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetRGBAAtString")
}

// Defined at GenKL\\ai_nodes.kl:68:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetVecAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: param");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: z");
    return;
  }
AiNodeSetVecAtString(f2anode, f2aparam, f2ax, f2ay, f2az);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetVecAtString")
}

// Defined at GenKL\\ai_nodes.kl:69:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetPntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: param");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: z");
    return;
  }
AiNodeSetPntAtString(f2anode, f2aparam, f2ax, f2ay, f2az);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetPntAtString")
}

// Defined at GenKL\\ai_nodes.kl:70:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetPnt2AtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeSetPnt2AtString. unable to convert: param");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeSetPnt2AtString. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeSetPnt2AtString. unable to convert: y");
    return;
  }
AiNodeSetPnt2AtString(f2anode, f2aparam, f2ax, f2ay);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetPnt2AtString")
}

// Defined at GenKL\\ai_nodes.kl:71:1
FABRIC_EXT_EXPORT void _fe_AiNodeSetAttributes(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam attributes
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetAttributes")

  char* f2aAttributes = NULL;
  if(!String_to_char(attributes, f2aAttributes)){
    setError("Error in _fe_AiNodeSetAttributes. unable to convert: attributes");
    return;
  }
AiNodeSetAttributes(f2anode, f2aattributes);
  F2A_CATCH_STATEMENT("_fe_AiNodeSetAttributes")
}

// Defined at GenKL\\ai_nodes.kl:77:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt8 _fe_AiNodeGetByteAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetByteAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetByteAtString. unable to convert: param");
    return ;
  }
AtByte f2a_result = AiNodeGetByteAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetByteAtString", )
}

// Defined at GenKL\\ai_nodes.kl:78:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeGetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetIntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetIntAtString. unable to convert: param");
    return ;
  }
int f2a_result = AiNodeGetIntAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetIntAtString", )
}

// Defined at GenKL\\ai_nodes.kl:79:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiNodeGetUIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetUIntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetUIntAtString. unable to convert: param");
    return ;
  }
unsigned int f2a_result = AiNodeGetUIntAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetUIntAtString", )
}

// Defined at GenKL\\ai_nodes.kl:80:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeGetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetBoolAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetBoolAtString. unable to convert: param");
    return ;
  }
bool f2a_result = AiNodeGetBoolAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetBoolAtString", )
}

// Defined at GenKL\\ai_nodes.kl:81:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float32 _fe_AiNodeGetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetFltAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetFltAtString. unable to convert: param");
    return ;
  }
float f2a_result = AiNodeGetFltAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetFltAtString", )
}

// Defined at GenKL\\ai_nodes.kl:82:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::RGB >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetRGBAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetRGBAtString. unable to convert: param");
    return;
  }
AtRGB f2a_result = AiNodeGetRGBAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetRGBAtString")
}

// Defined at GenKL\\ai_nodes.kl:83:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetRGBAAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetRGBAAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetRGBAAtString. unable to convert: param");
    return;
  }
AtRGBA f2a_result = AiNodeGetRGBAAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetRGBAAtString")
}

// Defined at GenKL\\ai_nodes.kl:84:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetVecAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetVecAtString. unable to convert: param");
    return;
  }
AtVector f2a_result = AiNodeGetVecAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetVecAtString")
}

// Defined at GenKL\\ai_nodes.kl:85:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetPntAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetPntAtString. unable to convert: param");
    return;
  }
AtPoint f2a_result = AiNodeGetPntAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetPntAtString")
}

// Defined at GenKL\\ai_nodes.kl:86:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetPnt2AtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetPnt2AtString. unable to convert: param");
    return;
  }
AtPoint2 f2a_result = AiNodeGetPnt2AtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetPnt2AtString")
}

// Defined at GenKL\\ai_nodes.kl:87:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiNodeGetPtrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetPtrAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetPtrAtString. unable to convert: param");
    return ;
  }
void * f2a_result = AiNodeGetPtrAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetPtrAtString", )
}

// Defined at GenKL\\ai_nodes.kl:88:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetArrayAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetArrayAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetArrayAtString. unable to convert: param");
    return;
  }
AtArray * f2a_result = AiNodeGetArrayAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetArrayAtString")
}

// Defined at GenKL\\ai_nodes.kl:89:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetStrAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetStrAtString. unable to convert: param");
    return;
  }
AtString f2a_result = AiNodeGetStrAtString(f2anode, f2aparam);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetStrAtString")
}

// Defined at GenKL\\ai_nodes.kl:90:1
FABRIC_EXT_EXPORT void _fe_AiNodeGetMatrixAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam matrix
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetMatrixAtString")

  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetMatrixAtString. unable to convert: param");
    return;
  }
  AtMatrix f2aMatrix;
  if(!Mat44_to_AtMatrix(matrix, f2aMatrix)){
    setError("Error in _fe_AiNodeGetMatrixAtString. unable to convert: matrix");
    return;
  }
AiNodeGetMatrixAtString(f2anode, f2aparam, f2amatrix);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetMatrixAtString")
}

// Defined at GenKL\\ai_render.kl:33:1
FABRIC_EXT_EXPORT void _fe_AiBegin(
)
{
  F2A_TRY_STATEMENT("_fe_AiBegin")

AiBegin();
  F2A_CATCH_STATEMENT("_fe_AiBegin")
}

// Defined at GenKL\\ai_render.kl:34:1
FABRIC_EXT_EXPORT void _fe_AiEnd(
)
{
  F2A_TRY_STATEMENT("_fe_AiEnd")

AiEnd();
  F2A_CATCH_STATEMENT("_fe_AiEnd")
}

// Defined at GenKL\\ai_render.kl:35:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiRender(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam mode
)
{
  F2A_TRY_STATEMENT("_fe_AiRender")

  int f2aMode;
  if(!SInt32_to_int(mode, f2aMode)){
    setError("Error in _fe_AiRender. unable to convert: mode");
    return ;
  }
int f2a_result = AiRender(f2amode/*=AI_RENDER_MODE_CAMERA*/);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiRender", )
}

// Defined at GenKL\\ai_render.kl:36:1
FABRIC_EXT_EXPORT void _fe_AiRenderAbort(
)
{
  F2A_TRY_STATEMENT("_fe_AiRenderAbort")

AiRenderAbort();
  F2A_CATCH_STATEMENT("_fe_AiRenderAbort")
}

// Defined at GenKL\\ai_render.kl:37:1
FABRIC_EXT_EXPORT void _fe_AiRenderInterrupt(
)
{
  F2A_TRY_STATEMENT("_fe_AiRenderInterrupt")

AiRenderInterrupt();
  F2A_CATCH_STATEMENT("_fe_AiRenderInterrupt")
}

// Defined at GenKL\\ai_render.kl:38:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiRendering(
)
{
  F2A_TRY_STATEMENT("_fe_AiRendering")

bool f2a_result = AiRendering();
  F2A_CATCH_STATEMENT_RETURN("_fe_AiRendering", )
}

// Defined at GenKL\\ai_plugins.kl:23:1
FABRIC_EXT_EXPORT void _fe_AiLoadPlugins(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam directory
)
{
  F2A_TRY_STATEMENT("_fe_AiLoadPlugins")

  char* f2aDirectory = NULL;
  if(!String_to_char(directory, f2aDirectory)){
    setError("Error in _fe_AiLoadPlugins. unable to convert: directory");
    return;
  }
AiLoadPlugins(f2adirectory);
  F2A_CATCH_STATEMENT("_fe_AiLoadPlugins")
}

// Defined at GenKL\\ai_plugins.kl:24:1
FABRIC_EXT_EXPORT void _fe_AiLoadPlugin(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam path
)
{
  F2A_TRY_STATEMENT("_fe_AiLoadPlugin")

  char* f2aPath = NULL;
  if(!String_to_char(path, f2aPath)){
    setError("Error in _fe_AiLoadPlugin. unable to convert: path");
    return;
  }
AiLoadPlugin(f2apath);
  F2A_CATCH_STATEMENT("_fe_AiLoadPlugin")
}

// Defined at GenKL\\ai_ray.kl:93:1
FABRIC_EXT_EXPORT void _fe_AiMakeRay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::IOParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam origin,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam dir,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam maxdist,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg
)
{
  F2A_TRY_STATEMENT("_fe_AiMakeRay")

  AtUInt32 f2aType;
  if(!UInt32_to_AtUInt32(type, f2aType)){
    setError("Error in _fe_AiMakeRay. unable to convert: type");
    return;
  }
  AtPoint f2aOrigin;
  if(!Vec3_to_AtPoint(origin, f2aOrigin)){
    setError("Error in _fe_AiMakeRay. unable to convert: origin");
    return;
  }
  AtPoint f2aDir;
  if(!Vec3_to_AtPoint(dir, f2aDir)){
    setError("Error in _fe_AiMakeRay. unable to convert: dir");
    return;
  }
  double f2aMaxdist;
  if(!Float64_to_double(maxdist, f2aMaxdist)){
    setError("Error in _fe_AiMakeRay. unable to convert: maxdist");
    return;
  }
AiMakeRay(f2aray, f2atype, f2aorigin, f2adir, f2amaxdist, f2asg);
  F2A_CATCH_STATEMENT("_fe_AiMakeRay")
}

// Defined at GenKL\\ai_ray.kl:94:1
FABRIC_EXT_EXPORT void _fe_AiReflectRay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::IOParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam normal,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg
)
{
  F2A_TRY_STATEMENT("_fe_AiReflectRay")

  AtPoint f2aNormal;
  if(!Vec3_to_AtPoint(normal, f2aNormal)){
    setError("Error in _fe_AiReflectRay. unable to convert: normal");
    return;
  }
AiReflectRay(f2aray, f2anormal, f2asg);
  F2A_CATCH_STATEMENT("_fe_AiReflectRay")
}

// Defined at GenKL\\ai_ray.kl:95:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiRefractRay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::IOParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam normal,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam n1,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam n2,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg
)
{
  F2A_TRY_STATEMENT("_fe_AiRefractRay")

  AtPoint f2aNormal;
  if(!Vec3_to_AtPoint(normal, f2aNormal)){
    setError("Error in _fe_AiRefractRay. unable to convert: normal");
    return ;
  }
  float f2aN1;
  if(!Float32_to_float(n1, f2aN1)){
    setError("Error in _fe_AiRefractRay. unable to convert: n1");
    return ;
  }
  float f2aN2;
  if(!Float32_to_float(n2, f2aN2)){
    setError("Error in _fe_AiRefractRay. unable to convert: n2");
    return ;
  }
bool f2a_result = AiRefractRay(f2aray, f2anormal, f2an1, f2an2, f2asg);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiRefractRay", )
}

// Defined at GenKL\\ai_ray.kl:96:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTrace(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::INParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtScrSample >::IOParam sample
)
{
  F2A_TRY_STATEMENT("_fe_AiTrace")

bool f2a_result = AiTrace(f2aray, f2asample);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiTrace", )
}

// Defined at GenKL\\ai_ray.kl:97:1
FABRIC_EXT_EXPORT void _fe_AiTraceBackground(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::INParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtScrSample >::IOParam sample
)
{
  F2A_TRY_STATEMENT("_fe_AiTraceBackground")

AiTraceBackground(f2aray, f2asample);
  F2A_CATCH_STATEMENT("_fe_AiTraceBackground")
}

// Defined at GenKL\\ai_ray.kl:98:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTraceProbe(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::INParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sgout
)
{
  F2A_TRY_STATEMENT("_fe_AiTraceProbe")

bool f2a_result = AiTraceProbe(f2aray, f2asgout);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiTraceProbe", )
}

// Defined at GenKL\\ai_texture.kl:83:1
FABRIC_EXT_EXPORT void _fe_AiTextureParamsSetDefaults(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureParams >::IOParam params
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureParamsSetDefaults")

AiTextureParamsSetDefaults(f2aparams);
  F2A_CATCH_STATEMENT("_fe_AiTextureParamsSetDefaults")
}

// Defined at GenKL\\ai_texture.kl:84:1
FABRIC_EXT_EXPORT void _fe_AiTextureHandleCreate(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureHandle >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureHandleCreate")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureHandleCreate. unable to convert: filename");
    return;
  }
AtTextureHandle * f2a_result = AiTextureHandleCreate(f2afilename);
  F2A_CATCH_STATEMENT("_fe_AiTextureHandleCreate")
}

// Defined at GenKL\\ai_texture.kl:85:1
FABRIC_EXT_EXPORT void _fe_AiTextureHandleAccess(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureHandle >::IOParam handle,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureParams >::INParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::IOParam success
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureHandleAccess")

  bool f2aSuccess;
  if(!Boolean_to_bool(success, f2aSuccess)){
    setError("Error in _fe_AiTextureHandleAccess. unable to convert: success");
    return;
  }
AtRGBA f2a_result = AiTextureHandleAccess(f2asg, f2ahandle, f2aparams, f2asuccess/*=NULL*/);  bool_to_Boolean(f2aSuccess, success);

  F2A_CATCH_STATEMENT("_fe_AiTextureHandleAccess")
}

// Defined at GenKL\\ai_texture.kl:86:1
FABRIC_EXT_EXPORT void _fe_AiTextureHandleDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureHandle >::IOParam handle
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureHandleDestroy")

AiTextureHandleDestroy(f2ahandle);
  F2A_CATCH_STATEMENT("_fe_AiTextureHandleDestroy")
}

// Defined at GenKL\\ai_texture.kl:87:1
FABRIC_EXT_EXPORT void _fe_AiTextureAccess(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureParams >::INParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::IOParam success
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureAccess")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureAccess. unable to convert: filename");
    return;
  }
  bool f2aSuccess;
  if(!Boolean_to_bool(success, f2aSuccess)){
    setError("Error in _fe_AiTextureAccess. unable to convert: success");
    return;
  }
AtRGBA f2a_result = AiTextureAccess(f2asg, f2afilename, f2aparams, f2asuccess/*=NULL*/);  bool_to_Boolean(f2aSuccess, success);

  F2A_CATCH_STATEMENT("_fe_AiTextureAccess")
}

// Defined at GenKL\\ai_texture.kl:88:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetResolution(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam width,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam height
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetResolution")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetResolution. unable to convert: filename");
    return ;
  }
  AtUInt32 f2aWidth;
  if(!UInt32_to_AtUInt32(width, f2aWidth)){
    setError("Error in _fe_AiTextureGetResolution. unable to convert: width");
    return ;
  }
  AtUInt32 f2aHeight;
  if(!UInt32_to_AtUInt32(height, f2aHeight)){
    setError("Error in _fe_AiTextureGetResolution. unable to convert: height");
    return ;
  }
bool f2a_result = AiTextureGetResolution(f2afilename, f2awidth, f2aheight);  AtUInt32_to_UInt32(f2aWidth, width);
  AtUInt32_to_UInt32(f2aHeight, height);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetResolution", )
}

// Defined at GenKL\\ai_texture.kl:89:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetNumChannels(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam num_channels
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetNumChannels")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetNumChannels. unable to convert: filename");
    return ;
  }
  AtUInt32 f2aNum_channels;
  if(!UInt32_to_AtUInt32(num_channels, f2aNum_channels)){
    setError("Error in _fe_AiTextureGetNumChannels. unable to convert: num_channels");
    return ;
  }
bool f2a_result = AiTextureGetNumChannels(f2afilename, f2anum_channels);  AtUInt32_to_UInt32(f2aNum_channels, num_channels);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetNumChannels", )
}

// Defined at GenKL\\ai_texture.kl:90:1
FABRIC_EXT_EXPORT void _fe_AiTextureGetChannelName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam channel_index
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetChannelName")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetChannelName. unable to convert: filename");
    return;
  }
  AtUInt32 f2aChannel_index;
  if(!UInt32_to_AtUInt32(channel_index, f2aChannel_index)){
    setError("Error in _fe_AiTextureGetChannelName. unable to convert: channel_index");
    return;
  }
const char * f2a_result = AiTextureGetChannelName(f2afilename, f2achannel_index);
  F2A_CATCH_STATEMENT("_fe_AiTextureGetChannelName")
}

// Defined at GenKL\\ai_texture.kl:91:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetFormat(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetFormat")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetFormat. unable to convert: filename");
    return ;
  }
  AtUInt32 f2aFormat;
  if(!UInt32_to_AtUInt32(format, f2aFormat)){
    setError("Error in _fe_AiTextureGetFormat. unable to convert: format");
    return ;
  }
bool f2a_result = AiTextureGetFormat(f2afilename, f2aformat);  AtUInt32_to_UInt32(f2aFormat, format);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetFormat", )
}

// Defined at GenKL\\ai_texture.kl:92:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetBitDepth(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam bit_depth
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetBitDepth")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetBitDepth. unable to convert: filename");
    return ;
  }
  AtUInt32 f2aBit_depth;
  if(!UInt32_to_AtUInt32(bit_depth, f2aBit_depth)){
    setError("Error in _fe_AiTextureGetBitDepth. unable to convert: bit_depth");
    return ;
  }
bool f2a_result = AiTextureGetBitDepth(f2afilename, f2abit_depth);  AtUInt32_to_UInt32(f2aBit_depth, bit_depth);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetBitDepth", )
}

// Defined at GenKL\\ai_texture.kl:93:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetMatrices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam world_to_screen,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam world_to_camera
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetMatrices")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetMatrices. unable to convert: filename");
    return ;
  }
  AtMatrix f2aWorld_to_screen;
  if(!Mat44_to_AtMatrix(world_to_screen, f2aWorld_to_screen)){
    setError("Error in _fe_AiTextureGetMatrices. unable to convert: world_to_screen");
    return ;
  }
  AtMatrix f2aWorld_to_camera;
  if(!Mat44_to_AtMatrix(world_to_camera, f2aWorld_to_camera)){
    setError("Error in _fe_AiTextureGetMatrices. unable to convert: world_to_camera");
    return ;
  }
bool f2a_result = AiTextureGetMatrices(f2afilename, f2aworld_to_screen, f2aworld_to_camera);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetMatrices", )
}

// Defined at GenKL\\ai_texture.kl:94:1
FABRIC_EXT_EXPORT void _fe_AiTextureInvalidate(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureInvalidate")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureInvalidate. unable to convert: filename");
    return;
  }
AiTextureInvalidate(f2afilename);
  F2A_CATCH_STATEMENT("_fe_AiTextureInvalidate")
}

// Defined at GenKL\\ai_universe.kl:32:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiUniverseIsActive(
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseIsActive")

bool f2a_result = AiUniverseIsActive();
  F2A_CATCH_STATEMENT_RETURN("_fe_AiUniverseIsActive", )
}

// Defined at GenKL\\ai_universe.kl:33:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiUniverseCacheFlush(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam cache_flags
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseCacheFlush")

  int f2aCache_flags;
  if(!SInt32_to_int(cache_flags, f2aCache_flags)){
    setError("Error in _fe_AiUniverseCacheFlush. unable to convert: cache_flags");
    return ;
  }
bool f2a_result = AiUniverseCacheFlush(f2acache_flags);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiUniverseCacheFlush", )
}

// Defined at GenKL\\ai_universe.kl:34:1
FABRIC_EXT_EXPORT void _fe_AiUniverseGetOptions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetOptions")

AtNode * f2a_result = AiUniverseGetOptions();
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetOptions")
}

// Defined at GenKL\\ai_universe.kl:35:1
FABRIC_EXT_EXPORT void _fe_AiUniverseGetCamera(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetCamera")

AtNode * f2a_result = AiUniverseGetCamera();
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetCamera")
}

// Defined at GenKL\\ai_universe.kl:36:1
FABRIC_EXT_EXPORT void _fe_AiUniverseGetSceneBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetSceneBounds")

AtBBox f2a_result = AiUniverseGetSceneBounds();
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetSceneBounds")
}

// Defined at GenKL\\ai_universe.kl:37:1
FABRIC_EXT_EXPORT void _fe_AiUniverseGetNodeIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam node_mask
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetNodeIterator")

  AtUInt32 f2aNode_mask;
  if(!UInt32_to_AtUInt32(node_mask, f2aNode_mask)){
    setError("Error in _fe_AiUniverseGetNodeIterator. unable to convert: node_mask");
    return;
  }
AtNodeIterator * f2a_result = AiUniverseGetNodeIterator(f2anode_mask);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetNodeIterator")
}

// Defined at GenKL\\ai_universe.kl:38:1
FABRIC_EXT_EXPORT void _fe_AiUniverseGetNodeEntryIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam node_mask
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetNodeEntryIterator")

  AtUInt32 f2aNode_mask;
  if(!UInt32_to_AtUInt32(node_mask, f2aNode_mask)){
    setError("Error in _fe_AiUniverseGetNodeEntryIterator. unable to convert: node_mask");
    return;
  }
AtNodeEntryIterator * f2a_result = AiUniverseGetNodeEntryIterator(f2anode_mask);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetNodeEntryIterator")
}

// Defined at GenKL\\ai_universe.kl:39:1
FABRIC_EXT_EXPORT void _fe_AiUniverseGetAOVIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetAOVIterator")

AtAOVIterator * f2a_result = AiUniverseGetAOVIterator();
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetAOVIterator")
}

// Defined at GenKL\\ai_universe.kl:45:1
FABRIC_EXT_EXPORT void _fe_AiNodeIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIteratorDestroy")

AiNodeIteratorDestroy(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiNodeIteratorDestroy")
}

// Defined at GenKL\\ai_universe.kl:46:1
FABRIC_EXT_EXPORT void _fe_AiNodeIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIteratorGetNext")

AtNode * f2a_result = AiNodeIteratorGetNext(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiNodeIteratorGetNext")
}

// Defined at GenKL\\ai_universe.kl:47:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIteratorFinished")

bool f2a_result = AiNodeIteratorFinished(f2aiter);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIteratorFinished", )
}

// Defined at GenKL\\ai_universe.kl:53:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryIteratorDestroy")

AiNodeEntryIteratorDestroy(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryIteratorDestroy")
}

// Defined at GenKL\\ai_universe.kl:54:1
FABRIC_EXT_EXPORT void _fe_AiNodeEntryIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryIteratorGetNext")

AtNodeEntry * f2a_result = AiNodeEntryIteratorGetNext(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryIteratorGetNext")
}

// Defined at GenKL\\ai_universe.kl:55:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeEntryIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryIteratorFinished")

bool f2a_result = AiNodeEntryIteratorFinished(f2aiter);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryIteratorFinished", )
}

// Defined at GenKL\\ai_universe.kl:61:1
FABRIC_EXT_EXPORT void _fe_AiAOVIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiAOVIteratorDestroy")

AiAOVIteratorDestroy(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiAOVIteratorDestroy")
}

// Defined at GenKL\\ai_universe.kl:62:1
FABRIC_EXT_EXPORT void _fe_AiAOVIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiAOVIteratorGetNext")

const AtAOVEntry * f2a_result = AiAOVIteratorGetNext(f2aiter);
  F2A_CATCH_STATEMENT("_fe_AiAOVIteratorGetNext")
}

// Defined at GenKL\\ai_universe.kl:63:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiAOVIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiAOVIteratorFinished")

bool f2a_result = AiAOVIteratorFinished(f2aiter);
  F2A_CATCH_STATEMENT_RETURN("_fe_AiAOVIteratorFinished", )
}
